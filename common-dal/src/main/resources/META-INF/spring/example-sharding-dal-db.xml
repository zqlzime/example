<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
>

	<bean name="sharding_0" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url">
			<value>
				${jdbc_url0}
			</value>
		</property>
		<property name="username" value="${jdbc_username0}" />
		<property name="password" value="${jdbc_password0}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>

	<bean name="sharding_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url">
			<value>
				${jdbc_url1}
			</value>
		</property>
		<property name="username" value="${jdbc_username1}" />
		<property name="password" value="${jdbc_password1}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.weidai.example.dao.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="shardingDataSource"/>
		<property name="mapperLocations" value="classpath:META-INF/mybatis/mapper/*.xml"/>
	</bean>


	<!-- 配置好dataSourceRule,即对数据源进行管理 -->
	<bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
		<constructor-arg>
			<map>
				<entry key="sharding_0" value-ref="sharding_0"/>
				<entry key="sharding_1" value-ref="sharding_1"/>
			</map>
		</constructor-arg>
	</bean>

	<!-- 对user表的配置，进行分库分表配置，逻辑表名为user，每个库有实际的三张表 -->
	<bean id="userTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
		<constructor-arg value="user" index="0"/>
		<constructor-arg index="1">
			<list>
				<value>user_00</value>
				<value>user_01</value>
				<value>user_02</value>
			</list>
		</constructor-arg>
		<constructor-arg index="2" ref="dataSourceRule"/>
		<constructor-arg index="3" ref="userDatabaseShardingStrategy"/>
		<constructor-arg index="4" ref="userTableShardingStrategy"/>
	</bean>

	<!-- user分库策略 -->
	<bean id="userDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
		<constructor-arg index="0" value="user_id"/>
		<constructor-arg index="1">
			<bean class="com.weidai.example.biz.sharding.UserDatabaseShardingService" />
		</constructor-arg>
	</bean>

	<!-- user 分表策略 -->
	<bean id="userTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
		<constructor-arg index="0" value="user_id"/>
		<constructor-arg index="1">
			<bean class="com.weidai.example.biz.sharding.UserTableShardingService" />
		</constructor-arg>
	</bean>



	<!-- 对t_student表的配置，进行分库配置，逻辑表名为t_student，每个库有实际的三张表 -->
	<bean id="studentTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
		<constructor-arg value="student" index="0"/>
		<constructor-arg index="1">
			<list>
				<value>student_00</value>
				<value>student_01</value>
				<value>student_02</value>
			</list>
		</constructor-arg>
		<constructor-arg index="2" ref="dataSourceRule"/>
		<constructor-arg index="3" ref="studentDatabaseShardingStrategy"/>
		<constructor-arg index="4" ref="studentTableShardingStrategy"/>
	</bean>

	<!-- student分库策略 -->
	<bean id="studentDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
		<constructor-arg index="0" value="student_id"/>
		<constructor-arg index="1">
			<bean class="com.weidai.example.biz.sharding.StudentDatabaseShardingService" />
		</constructor-arg>
	</bean>

	<!-- t_student 分表策略 -->
	<bean id="studentTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
		<constructor-arg index="0" value="student_id"/>
		<constructor-arg index="1">
			<bean class="com.weidai.example.biz.sharding.StudentTableShardingService" />
		</constructor-arg>
	</bean>


	<!-- 构成分库分表的规则 传入数据源集合和每个表的分库分表的具体规则 -->
	<bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
		<constructor-arg index="0" ref="dataSourceRule"/>
		<constructor-arg index="1">
			<list>
				<ref bean="userTableRule"/>
				<ref bean="studentTableRule"/>
			</list>
		</constructor-arg>
	</bean>

	<!-- 对datasource进行封装 -->
	<bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
		<constructor-arg ref="shardingRule"/>
	</bean>

	<!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="shardingDataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />


</beans>
